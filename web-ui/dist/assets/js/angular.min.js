angular.module("poketrainer",["poketrainer.Module.Templates","Poketrainer.Module.SocketEventEmitter","Poketrainer.Service.Navigation","Poketrainer.Service.SocketEvent","Poketrainer.Service.Socket","Poketrainer.State.Abstracts","Poketrainer.State.Status","Poketrainer.State.Users","ui.router","ngMaterial","ngMessages"]).config(["$urlRouterProvider","$locationProvider","$urlMatcherFactoryProvider","$mdThemingProvider",function(e,t,o,n){e.rule(function(e,t){var o=t.url().toLowerCase();if(!("/"===o[o.length-1]||o.indexOf("/?")>-1))return o.indexOf("?")>-1?o.replace("?","/?"):o+"/"}).otherwise("/"),o.strictMode(!1),n.theme("default").primaryPalette("blue").accentPalette("red")}]).run(["$state","$rootScope","$document",function(e,t,o){t.$on("inventory:updated",function(e,t){}),t.$on("$stateChangeStart",function(){o.find(".screen-loading-overlay").removeClass("hidden")}),t.$on("$stateChangeSuccess",function(){o.find(".screen-loading-overlay").addClass("hidden")}),t.$on("$stateChangeError",function(t,n,r,a,s,i){"offline"===i&&(e.go("public.users"),o.find(".screen-loading-overlay").removeClass("hidden"))})}]),angular.module("Poketrainer.Module.SocketEventEmitter",["Poketrainer.Service.Socket"]).run(["$rootScope","PokeSocket","SocketEvent",function(e,t,o){t.forward(o.UserStatus),t.on(o.Data,function(t){e.$broadcast(t.event+":"+t.action,t.data)})}]),angular.module("Poketrainer.State.Abstracts",["ui.router"]).config(["$stateProvider",function(e){e.state("public",{"abstract":!0,views:{header:{templateUrl:"states/abstracts/header.tpl.html",controller:"HeaderController"},content:{template:"<ui-view/>"}}})}]).controller("HeaderController",["$rootScope","$scope","$state","Navigation",function(e,t,o,n){t.navigation=n.primary.get(),t.state=o.current.name,e.$on("$stateChangeSuccess",function(e,o,n,r,a){t.state=o.name})}]),angular.module("Poketrainer.State.Status",["ui.router","uiGmapgoogle-maps","chart.js","easypiechart","datatables","ui-leaflet","nemLogging"]).config(["$stateProvider","uiGmapGoogleMapApiProvider",function(e,t){t.configure({v:"3.24",libraries:"weather,geometry,visualization"}),e.state("public.dashboard",{url:"/dashboard/:username",resolve:{locationData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,n){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"location"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return o.on(n.Request,a),o.emit(n.Request,{username:t.username,types:["location"]}),r.promise}],inventoryData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,n){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"inventory"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return o.on(n.Request,a),o.emit(n.Request,{username:t.username,types:["inventory"]}),r.promise}],playerData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,n){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"player"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return o.on(n.Request,a),o.emit(n.Request,{username:t.username,types:["player"]}),r.promise}],playerStatsData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,n){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"player_stats"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return o.on(n.Request,a),o.emit(n.Request,{username:t.username,types:["player_stats"]}),r.promise}],pokemonData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,n){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"pokemon"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return o.on(n.Request,a),o.emit(n.Request,{username:t.username,types:["pokemon"]}),r.promise}],attacksData:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,n){var r=e.defer(),a=function(e){if(!angular.isUndefined(e)&&"attacks"==e.type)return e.success?void r.resolve(angular.fromJson(e.data)):void r.reject("offline")};return o.on(n.Request,a),o.emit(n.Request,{username:t.username,types:["attacks"]}),r.promise}]},controller:"DashboardController",templateUrl:"states/dashboard/dashboard.tpl.html"})}]).run(["Navigation",function(e){e.primary.register("Users","public.users",30,"md md-event-available","public.users")}]).controller("DashboardController",["$scope","$stateParams","$mdToast","PokeSocket","leafletData","locationData","inventoryData","playerData","playerStatsData","pokemonData","attacksData","SocketEvent","DTOptionsBuilder",function(e,t,o,n,r,a,s,i,l,u,c,p,d){var m=function(e,o){t.username==o.username&&"offline"==o.status&&$state.go("public.users")};e.$on(p._prefix+p.UserStatus,m),e.$on("$destroy",function(){n.emit(p.Leave,{room:t.username})}),n.emit(p.Join,{room:t.username});var v,f=function h(t){if(e.evolve_disabled=!1,e.transfer_disabled=!1,t.success)for(var r=e.pokemon.length-1;r>=0;r--)e.pokemon[r].id==v&&e.pokemon.splice(r,1);v=0,n.removeListener(p.Transfer,h),o.show(o.simple().textContent(t.message).position("top center").hideDelay(3e3))};e.transfer_disabled=!1,e.transfer=function(o){v=o,e.evolve_disabled=!0,e.transfer_disabled=!0,n.on(p.Transfer,f),n.emit(p.Transfer,{username:t.username,p_id:o})};var k=function $(t){e.evolve_disabled=!1,e.transfer_disabled=!1,n.removeListener(p.Evolve,$),o.show(o.simple().textContent(t.message).position("top center").hideDelay(3e3))};e.evolve_disabled=!1,e.evolve=function(o){e.evolve_disabled=!0,e.transfer_disabled=!0,n.on(p.Evolve,k),n.emit(p.Evolve,{username:t.username,p_id:o})};var g=function b(t){e.snipe_disabled=!1,n.removeListener(p.Snipe,b),o.show(o.simple().textContent(t.message).position("top center").hideDelay(3e3))};e.snipe_coords="",e.snipe_disabled=!1,e.snipe_auto=!1,e.snipe=function(o){e.snipe_disabled=!0,n.on(p.Snipe,g),n.emit(p.Snipe,{username:t.username,latlng:o})},e.$on("inventory:updated",function(t,o){e.inventory=o,S()}),e.$on("player_stats:updated",function(t,o){e.playerStats=o,S()}),e.$on("player:updated",function(t,o){e.player=o,S()}),e.$on("pokemon:caught",function(t,n){var r=n;e.pokemon.push(r),S(),o.show(o.simple().textContent("Caught: "+r.name+" (IV: "+Math.floor(r.iv)+" | CP: "+r.cp+")").position("top center").hideDelay(3e3))}),e.$on("pokemon:released",function(t,n){for(var r=n,a=e.pokemon.length-1;a>=0;a--)e.pokemon[a].id==r.id&&e.pokemon.splice(a,1);S(),o.show(o.simple().textContent("Released: "+r.name+" (IV: "+Math.floor(r.iv)+" | CP: "+r.cp+")").position("top center").hideDelay(3e3))}),e.$on("pokemon:evolved",function(t,n){for(var r=n.old,a=n["new"],s=e.pokemon.length-1;s>=0;s--)e.pokemon[s].id==r.id&&e.pokemon.splice(s,1);e.pokemon.push(a),o.show(o.simple().textContent("Evolved: "+r.name+" to "+a.name+" (IV: "+Math.floor(a.iv)+" | CP: "+a.cp+")").position("top center").hideDelay(3e3))}),e.$on("fort:spun",function(e,t){o.show(o.simple().textContent("Fort spun, reward: "+t.reward).position("top center").hideDelay(3e3))});var y=0;e.$on("position:update",function(t,o){if(y++,y%5==0){e.markers.bot.lat=o[0],e.markers.bot.lng=o[1];var n={lat:o[0],lng:o[1]};e.paths.main.latlngs.push(n)}}),e.player=i,e.playerStats=l,e.inventory=s,e.pokemon=u,e.attacks=c;var S=function(){e.playerStats.xpPercent=Math.floor((e.playerStats.experience-e.playerStats.prev_level_xp)/(e.playerStats.next_level_xp-e.playerStats.prev_level_xp)*100),e.playerStats.uniquePokedexPercent=Math.floor(e.playerStats.unique_pokedex_entries/151*100),e.playerStats.pokemonInvPercent=Math.floor(e.pokemon.length/e.player.max_pokemon_storage*100),e.playerStats.itemsInvPercent=Math.floor(e.inventory.item_count/e.player.max_item_storage*100)};S(),e.$on("$viewContentLoaded",function(){r.getMap().then(function(e){setTimeout(function(){e.invalidateSize()},3e3)})}),e.map={center:{lat:a[0],lng:a[1],zoom:15}},e.markers={bot:{lat:a[0],lng:a[1],message:e.player.username,focus:!0,draggable:!1}},e.paths={main:{color:"#F44336",weight:4,latlngs:[{lat:a[0],lng:a[1]}]}},e.pokemonDataTableOptions=d.newOptions().withOption("order",[[0,"desc"]]).withOption("stateSave",!0),e.expLvlOptions={animate:{duration:1e3,enabled:!0},barColor:"#03A9F4",scaleColor:!1,lineWidth:10,lineCap:"circle"},e.uniquePokedexOptions={animate:{duration:1e3,enabled:!0},barColor:"#FFC107",scaleColor:!1,lineWidth:10,lineCap:"circle"},e.pokemonInvOptions={animate:{duration:1e3,enabled:!0},barColor:"#009688",scaleColor:!1,lineWidth:10,lineCap:"circle"},e.itemsInvOptions={animate:{duration:1e3,enabled:!0},barColor:"#F44336",scaleColor:!1,lineWidth:10,lineCap:"circle"}}]),angular.module("Poketrainer.State.Users",["ui.router"]).config(["$stateProvider",function(e){e.state("public.users",{url:"/",resolve:{Users:["$q","$stateParams","PokeSocket","SocketEvent",function(e,t,o,n){var r=e.defer(),a=function s(e){if(!angular.isUndefined(e)&&e.success&&angular.isArray(e.users)){o.removeListener(n.UserList,s);for(var t=0;t<e.users.length;t++)e.users[t].status="unknown";r.resolve(e.users)}};return o.on(n.UserList,a),o.emit(n.UserList),r.promise}]},controller:"UsersController",templateUrl:"states/users/users.tpl.html"})}]).run(["Navigation",function(e){e.primary.register("Users","public.users",30,"md md-event-available","public.users")}]).controller("UsersController",["$scope","Users","PokeSocket","SocketEvent",function(e,t,o,n){e.users=t;var r=function(t,o){for(var n=0;n<e.users.length;n++)e.users[n].username==o.username&&(e.users[n].status=o.status)};e.$on(n._prefix+n.UserStatus,r)}]),angular.module("Poketrainer.Service.Navigation",[]).factory("Navigation",function(){var e=[],t=function(){return e.sort(function(e,t){var o=e.Priority-t.Priority;return 0===o?e.Label.localeCompare(t.Label):o})},o=function(t,o,n,r,a){"string"!=typeof r&&(r="md md-chevron-right"),"string"!=typeof a&&(a=o),("number"!=typeof n||n<0)&&(n=10),e.push({Label:t,State:o,ActiveState:a,Priority:n,Icon:r})};return{primary:{get:t,register:o}}}),angular.module("Poketrainer.Service.SocketEvent",[]).factory("SocketEvent",function(){return{_prefix:"socket:",UserList:"users",UserStatus:"user_status",Request:"pull",Data:"push",Join:"join",Leave:"leave",Transfer:"transfer",Evolve:"evolve",Snipe:"snipe"}}),angular.module("Poketrainer.Service.Socket",["btford.socket-io"]).factory("PokeSocket",["socketFactory","$location",function(e,t){var o=window.location.pathname.replace(/\/+$/g,"")+"/socket.io";return e({ioSocket:io.connect(window.location.protocol+"//"+window.location.host+"/poketrainer",{path:o})})}]);
//# sourceMappingURL=data:application/json;base64,
